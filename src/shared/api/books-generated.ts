/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * Books.API
 * OpenAPI spec version: v1
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";

export interface BookDto {
  id: number;
  name: string;
  description: string;
  price: number;
  publishDate: Date;
  userId: number;
  coAuthorIds: null | number[];
}

export interface CommentDto {
  id: number;
  content: string;
  userId: number;
  bookId: number;
}

export interface UpdateCommentsRequest {
  bookId: number;
  /** @minLength 1 */
  content: string;
  id: number;
}

export interface UpdateBooksRequest {
  /** @nullable */
  coAuthorIds?: number[] | null;
  /** @nullable */
  description?: string | null;
  id: number;
  /** @minLength 1 */
  name: string;
  /** @nullable */
  price?: number | null;
  publishDate?: string;
  userId: number;
}

export interface CreateCommentsRequest {
  bookId: number;
  /** @minLength 1 */
  content: string;
}

export interface CreateBooksRequest {
  /** @nullable */
  coAuthorIds?: number[] | null;
  /** @minLength 1 */
  description: string;
  /** @minLength 1 */
  name: string;
  price: number;
  photoUrl: string;
}

// eslint-disable-next-line  @typescript-eslint/no-explicit-any
type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const postApiBooks = (
  version: string,
  createBooksRequest: BodyType<CreateBooksRequest>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<BookDto>(
    {
      url: `https://localhost:7218/api/v${version}/Books`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createBooksRequest,
    },
    options,
  );
};

export const getApiBooks = (version: string, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<BookDto[]>({ url: `https://localhost:7218/api/v${version}/Books`, method: "GET" }, options);
};

export const putApiBooks = (
  version: string,
  updateBooksRequest: BodyType<UpdateBooksRequest>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `https://localhost:7218/api/v${version}/Books`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateBooksRequest,
    },
    options,
  );
};

export const getApiBooksId = (version: string, id: number, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<BookDto>({ url: `https://localhost:7218/api/v${version}/Books/${id}`, method: "GET" }, options);
};

export const deleteApiBooksId = (version: string, id: number, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `https://localhost:7218/api/v${version}/Books/${id}`, method: "DELETE" }, options);
};

export const getApiBooksPageId = (version: string, id: number, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/api/v${version}/Books/page/${id}`, method: "GET" }, options);
};

export const getApiBooksGenreGenreId = (
  version: string,
  genreId: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>({ url: `/api/v${version}/Books/genre/${genreId}`, method: "GET" }, options);
};

export const getApiBooksUserUserId = (version: string, userId: number, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<BookDto[]>(
    { url: `https://localhost:7218/api/v${version}/Books/user/${userId}`, method: "GET" },
    options,
  );
};

export const postApiComments = (
  version: string,
  createCommentsRequest: BodyType<CreateCommentsRequest>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CommentDto>(
    {
      url: `https://localhost:7218/api/v${version}/Comments`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCommentsRequest,
    },
    options,
  );
};

export const putApiComments = (
  version: string,
  updateCommentsRequest: BodyType<UpdateCommentsRequest>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/api/v${version}/Comments`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateCommentsRequest,
    },
    options,
  );
};

export const getApiCommentsId = (version: string, id: number, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/api/v${version}/Comments/${id}`, method: "GET" }, options);
};

export const deleteApiCommentsId = (version: string, id: number, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/api/v${version}/Comments/${id}`, method: "DELETE" }, options);
};

export const getApiCommentsBookId = (version: string, id: number, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<CommentDto[]>(
    { url: `https://localhost:7218/api/v${version}/Comments/book/${id}`, method: "GET" },
    options,
  );
};

export const getApiCommentsUser = (version: string, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/api/v${version}/Comments/user`, method: "GET" }, options);
};

export type PostApiBooksResult = NonNullable<Awaited<ReturnType<typeof postApiBooks>>>;
export type GetApiBooksResult = NonNullable<Awaited<ReturnType<typeof getApiBooks>>>;
export type PutApiBooksResult = NonNullable<Awaited<ReturnType<typeof putApiBooks>>>;
export type GetApiBooksIdResult = NonNullable<Awaited<ReturnType<typeof getApiBooksId>>>;
export type DeleteApiBooksIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiBooksId>>>;
export type GetApiBooksPageIdResult = NonNullable<Awaited<ReturnType<typeof getApiBooksPageId>>>;
export type GetApiBooksGenreGenreIdResult = NonNullable<Awaited<ReturnType<typeof getApiBooksGenreGenreId>>>;
export type GetApiBooksUserUserIdResult = NonNullable<Awaited<ReturnType<typeof getApiBooksUserUserId>>>;
export type PostApiCommentsResult = NonNullable<Awaited<ReturnType<typeof postApiComments>>>;
export type PutApiCommentsResult = NonNullable<Awaited<ReturnType<typeof putApiComments>>>;
export type GetApiCommentsIdResult = NonNullable<Awaited<ReturnType<typeof getApiCommentsId>>>;
export type DeleteApiCommentsIdResult = NonNullable<Awaited<ReturnType<typeof deleteApiCommentsId>>>;
export type GetApiCommentsBookIdResult = NonNullable<Awaited<ReturnType<typeof getApiCommentsBookId>>>;
export type GetApiCommentsUserResult = NonNullable<Awaited<ReturnType<typeof getApiCommentsUser>>>;
